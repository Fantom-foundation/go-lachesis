// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go

// Package ethapi is a generated GoMock package.
package ethapi

import (
	context "context"
	evmcore "github.com/Fantom-foundation/go-lachesis/evmcore"
	hash "github.com/Fantom-foundation/go-lachesis/hash"
	inter "github.com/Fantom-foundation/go-lachesis/inter"
	idx "github.com/Fantom-foundation/go-lachesis/inter/idx"
	pos "github.com/Fantom-foundation/go-lachesis/inter/pos"
	sfctype "github.com/Fantom-foundation/go-lachesis/inter/sfctype"
	accounts "github.com/ethereum/go-ethereum/accounts"
	common "github.com/ethereum/go-ethereum/common"
	state "github.com/ethereum/go-ethereum/core/state"
	types "github.com/ethereum/go-ethereum/core/types"
	vm "github.com/ethereum/go-ethereum/core/vm"
	ethdb "github.com/ethereum/go-ethereum/ethdb"
	event "github.com/ethereum/go-ethereum/event"
	params "github.com/ethereum/go-ethereum/params"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
	time "time"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// ProtocolVersion mocks base method
func (m *MockBackend) ProtocolVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ProtocolVersion indicates an expected call of ProtocolVersion
func (mr *MockBackendMockRecorder) ProtocolVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolVersion", reflect.TypeOf((*MockBackend)(nil).ProtocolVersion))
}

// Progress mocks base method
func (m *MockBackend) Progress() PeerProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress")
	ret0, _ := ret[0].(PeerProgress)
	return ret0
}

// Progress indicates an expected call of Progress
func (mr *MockBackendMockRecorder) Progress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockBackend)(nil).Progress))
}

// SuggestPrice mocks base method
func (m *MockBackend) SuggestPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestPrice indicates an expected call of SuggestPrice
func (mr *MockBackendMockRecorder) SuggestPrice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestPrice", reflect.TypeOf((*MockBackend)(nil).SuggestPrice), ctx)
}

// ChainDb mocks base method
func (m *MockBackend) ChainDb() ethdb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainDb")
	ret0, _ := ret[0].(ethdb.Database)
	return ret0
}

// ChainDb indicates an expected call of ChainDb
func (mr *MockBackendMockRecorder) ChainDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainDb", reflect.TypeOf((*MockBackend)(nil).ChainDb))
}

// AccountManager mocks base method
func (m *MockBackend) AccountManager() *accounts.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountManager")
	ret0, _ := ret[0].(*accounts.Manager)
	return ret0
}

// AccountManager indicates an expected call of AccountManager
func (mr *MockBackendMockRecorder) AccountManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountManager", reflect.TypeOf((*MockBackend)(nil).AccountManager))
}

// ExtRPCEnabled mocks base method
func (m *MockBackend) ExtRPCEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtRPCEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExtRPCEnabled indicates an expected call of ExtRPCEnabled
func (mr *MockBackendMockRecorder) ExtRPCEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtRPCEnabled", reflect.TypeOf((*MockBackend)(nil).ExtRPCEnabled))
}

// RPCGasCap mocks base method
func (m *MockBackend) RPCGasCap() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCGasCap")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// RPCGasCap indicates an expected call of RPCGasCap
func (mr *MockBackendMockRecorder) RPCGasCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCGasCap", reflect.TypeOf((*MockBackend)(nil).RPCGasCap))
}

// RPCTxFeeCap mocks base method
func (m *MockBackend) RPCTxFeeCap() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCTxFeeCap")
	ret0, _ := ret[0].(float64)
	return ret0
}

// RPCTxFeeCap indicates an expected call of RPCTxFeeCap
func (mr *MockBackendMockRecorder) RPCTxFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCTxFeeCap", reflect.TypeOf((*MockBackend)(nil).RPCTxFeeCap))
}

// CalcLogsBloom mocks base method
func (m *MockBackend) CalcLogsBloom() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcLogsBloom")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CalcLogsBloom indicates an expected call of CalcLogsBloom
func (mr *MockBackendMockRecorder) CalcLogsBloom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcLogsBloom", reflect.TypeOf((*MockBackend)(nil).CalcLogsBloom))
}

// HeaderByNumber mocks base method
func (m *MockBackend) HeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*evmcore.EvmHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, number)
	ret0, _ := ret[0].(*evmcore.EvmHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber
func (mr *MockBackendMockRecorder) HeaderByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockBackend)(nil).HeaderByNumber), ctx, number)
}

// HeaderByHash mocks base method
func (m *MockBackend) HeaderByHash(ctx context.Context, hash common.Hash) (*evmcore.EvmHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHash", ctx, hash)
	ret0, _ := ret[0].(*evmcore.EvmHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHash indicates an expected call of HeaderByHash
func (mr *MockBackendMockRecorder) HeaderByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHash", reflect.TypeOf((*MockBackend)(nil).HeaderByHash), ctx, hash)
}

// BlockByNumber mocks base method
func (m *MockBackend) BlockByNumber(ctx context.Context, number rpc.BlockNumber) (*evmcore.EvmBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, number)
	ret0, _ := ret[0].(*evmcore.EvmBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber
func (mr *MockBackendMockRecorder) BlockByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockBackend)(nil).BlockByNumber), ctx, number)
}

// StateAndHeaderByNumberOrHash mocks base method
func (m *MockBackend) StateAndHeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*state.StateDB, *evmcore.EvmHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAndHeaderByNumberOrHash", ctx, blockNrOrHash)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(*evmcore.EvmHeader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StateAndHeaderByNumberOrHash indicates an expected call of StateAndHeaderByNumberOrHash
func (mr *MockBackendMockRecorder) StateAndHeaderByNumberOrHash(ctx, blockNrOrHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAndHeaderByNumberOrHash", reflect.TypeOf((*MockBackend)(nil).StateAndHeaderByNumberOrHash), ctx, blockNrOrHash)
}

// BlockByHash mocks base method
func (m *MockBackend) BlockByHash(ctx context.Context, hash common.Hash) (*evmcore.EvmBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, hash)
	ret0, _ := ret[0].(*evmcore.EvmBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash
func (mr *MockBackendMockRecorder) BlockByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockBackend)(nil).BlockByHash), ctx, hash)
}

// GetReceiptsByNumber mocks base method
func (m *MockBackend) GetReceiptsByNumber(ctx context.Context, number rpc.BlockNumber) (types.Receipts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptsByNumber", ctx, number)
	ret0, _ := ret[0].(types.Receipts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptsByNumber indicates an expected call of GetReceiptsByNumber
func (mr *MockBackendMockRecorder) GetReceiptsByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptsByNumber", reflect.TypeOf((*MockBackend)(nil).GetReceiptsByNumber), ctx, number)
}

// GetTd mocks base method
func (m *MockBackend) GetTd(hash common.Hash) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTd", hash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTd indicates an expected call of GetTd
func (mr *MockBackendMockRecorder) GetTd(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTd", reflect.TypeOf((*MockBackend)(nil).GetTd), hash)
}

// GetEVM mocks base method
func (m *MockBackend) GetEVM(ctx context.Context, msg evmcore.Message, state *state.StateDB, header *evmcore.EvmHeader) (*vm.EVM, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVM", ctx, msg, state, header)
	ret0, _ := ret[0].(*vm.EVM)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEVM indicates an expected call of GetEVM
func (mr *MockBackendMockRecorder) GetEVM(ctx, msg, state, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVM", reflect.TypeOf((*MockBackend)(nil).GetEVM), ctx, msg, state, header)
}

// SendTx mocks base method
func (m *MockBackend) SendTx(ctx context.Context, signedTx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTx", ctx, signedTx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTx indicates an expected call of SendTx
func (mr *MockBackendMockRecorder) SendTx(ctx, signedTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTx", reflect.TypeOf((*MockBackend)(nil).SendTx), ctx, signedTx)
}

// GetTransaction mocks base method
func (m *MockBackend) GetTransaction(ctx context.Context, txHash common.Hash) (*types.Transaction, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, txHash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockBackendMockRecorder) GetTransaction(ctx, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBackend)(nil).GetTransaction), ctx, txHash)
}

// GetPoolTransactions mocks base method
func (m *MockBackend) GetPoolTransactions() (types.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolTransactions")
	ret0, _ := ret[0].(types.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolTransactions indicates an expected call of GetPoolTransactions
func (mr *MockBackendMockRecorder) GetPoolTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolTransactions", reflect.TypeOf((*MockBackend)(nil).GetPoolTransactions))
}

// GetPoolTransaction mocks base method
func (m *MockBackend) GetPoolTransaction(txHash common.Hash) *types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolTransaction", txHash)
	ret0, _ := ret[0].(*types.Transaction)
	return ret0
}

// GetPoolTransaction indicates an expected call of GetPoolTransaction
func (mr *MockBackendMockRecorder) GetPoolTransaction(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolTransaction", reflect.TypeOf((*MockBackend)(nil).GetPoolTransaction), txHash)
}

// GetPoolNonce mocks base method
func (m *MockBackend) GetPoolNonce(ctx context.Context, addr common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolNonce", ctx, addr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolNonce indicates an expected call of GetPoolNonce
func (mr *MockBackendMockRecorder) GetPoolNonce(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolNonce", reflect.TypeOf((*MockBackend)(nil).GetPoolNonce), ctx, addr)
}

// Stats mocks base method
func (m *MockBackend) Stats() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Stats indicates an expected call of Stats
func (mr *MockBackendMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockBackend)(nil).Stats))
}

// TxPoolContent mocks base method
func (m *MockBackend) TxPoolContent() (map[common.Address]types.Transactions, map[common.Address]types.Transactions) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPoolContent")
	ret0, _ := ret[0].(map[common.Address]types.Transactions)
	ret1, _ := ret[1].(map[common.Address]types.Transactions)
	return ret0, ret1
}

// TxPoolContent indicates an expected call of TxPoolContent
func (mr *MockBackendMockRecorder) TxPoolContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPoolContent", reflect.TypeOf((*MockBackend)(nil).TxPoolContent))
}

// SubscribeNewTxsNotify mocks base method
func (m *MockBackend) SubscribeNewTxsNotify(arg0 chan<- evmcore.NewTxsNotify) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTxsNotify", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewTxsNotify indicates an expected call of SubscribeNewTxsNotify
func (mr *MockBackendMockRecorder) SubscribeNewTxsNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTxsNotify", reflect.TypeOf((*MockBackend)(nil).SubscribeNewTxsNotify), arg0)
}

// ChainConfig mocks base method
func (m *MockBackend) ChainConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// ChainConfig indicates an expected call of ChainConfig
func (mr *MockBackendMockRecorder) ChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockBackend)(nil).ChainConfig))
}

// CurrentBlock mocks base method
func (m *MockBackend) CurrentBlock() *evmcore.EvmBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*evmcore.EvmBlock)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockBackendMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBackend)(nil).CurrentBlock))
}

// GetEvent mocks base method
func (m *MockBackend) GetEvent(ctx context.Context, shortEventID string) (*inter.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, shortEventID)
	ret0, _ := ret[0].(*inter.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockBackendMockRecorder) GetEvent(ctx, shortEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockBackend)(nil).GetEvent), ctx, shortEventID)
}

// GetEventHeader mocks base method
func (m *MockBackend) GetEventHeader(ctx context.Context, shortEventID string) (*inter.EventHeaderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventHeader", ctx, shortEventID)
	ret0, _ := ret[0].(*inter.EventHeaderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventHeader indicates an expected call of GetEventHeader
func (mr *MockBackendMockRecorder) GetEventHeader(ctx, shortEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventHeader", reflect.TypeOf((*MockBackend)(nil).GetEventHeader), ctx, shortEventID)
}

// GetConsensusTime mocks base method
func (m *MockBackend) GetConsensusTime(ctx context.Context, shortEventID string) (inter.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusTime", ctx, shortEventID)
	ret0, _ := ret[0].(inter.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsensusTime indicates an expected call of GetConsensusTime
func (mr *MockBackendMockRecorder) GetConsensusTime(ctx, shortEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusTime", reflect.TypeOf((*MockBackend)(nil).GetConsensusTime), ctx, shortEventID)
}

// GetHeads mocks base method
func (m *MockBackend) GetHeads(ctx context.Context, epoch rpc.BlockNumber) (hash.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeads", ctx, epoch)
	ret0, _ := ret[0].(hash.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeads indicates an expected call of GetHeads
func (mr *MockBackendMockRecorder) GetHeads(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeads", reflect.TypeOf((*MockBackend)(nil).GetHeads), ctx, epoch)
}

// CurrentEpoch mocks base method
func (m *MockBackend) CurrentEpoch(ctx context.Context) idx.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEpoch", ctx)
	ret0, _ := ret[0].(idx.Epoch)
	return ret0
}

// CurrentEpoch indicates an expected call of CurrentEpoch
func (mr *MockBackendMockRecorder) CurrentEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEpoch", reflect.TypeOf((*MockBackend)(nil).CurrentEpoch), ctx)
}

// GetEpochStats mocks base method
func (m *MockBackend) GetEpochStats(ctx context.Context, requestedEpoch rpc.BlockNumber) (*sfctype.EpochStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochStats", ctx, requestedEpoch)
	ret0, _ := ret[0].(*sfctype.EpochStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochStats indicates an expected call of GetEpochStats
func (mr *MockBackendMockRecorder) GetEpochStats(ctx, requestedEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochStats", reflect.TypeOf((*MockBackend)(nil).GetEpochStats), ctx, requestedEpoch)
}

// BlocksTTF mocks base method
func (m *MockBackend) BlocksTTF(ctx context.Context, untilBlock rpc.BlockNumber, maxBlocks idx.Block, mode string) (map[hash.Event]time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlocksTTF", ctx, untilBlock, maxBlocks, mode)
	ret0, _ := ret[0].(map[hash.Event]time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlocksTTF indicates an expected call of BlocksTTF
func (mr *MockBackendMockRecorder) BlocksTTF(ctx, untilBlock, maxBlocks, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlocksTTF", reflect.TypeOf((*MockBackend)(nil).BlocksTTF), ctx, untilBlock, maxBlocks, mode)
}

// ForEachEpochEvent mocks base method
func (m *MockBackend) ForEachEpochEvent(ctx context.Context, epoch rpc.BlockNumber, onEvent func(*inter.Event) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachEpochEvent", ctx, epoch, onEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachEpochEvent indicates an expected call of ForEachEpochEvent
func (mr *MockBackendMockRecorder) ForEachEpochEvent(ctx, epoch, onEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachEpochEvent", reflect.TypeOf((*MockBackend)(nil).ForEachEpochEvent), ctx, epoch, onEvent)
}

// ValidatorTimeDrifts mocks base method
func (m *MockBackend) ValidatorTimeDrifts(ctx context.Context, epoch rpc.BlockNumber, maxEvents idx.Event) (map[idx.StakerID]map[hash.Event]time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorTimeDrifts", ctx, epoch, maxEvents)
	ret0, _ := ret[0].(map[idx.StakerID]map[hash.Event]time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorTimeDrifts indicates an expected call of ValidatorTimeDrifts
func (mr *MockBackendMockRecorder) ValidatorTimeDrifts(ctx, epoch, maxEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorTimeDrifts", reflect.TypeOf((*MockBackend)(nil).ValidatorTimeDrifts), ctx, epoch, maxEvents)
}

// GetValidators mocks base method
func (m *MockBackend) GetValidators(ctx context.Context) *pos.Validators {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx)
	ret0, _ := ret[0].(*pos.Validators)
	return ret0
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockBackendMockRecorder) GetValidators(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockBackend)(nil).GetValidators), ctx)
}

// GetValidationScore mocks base method
func (m *MockBackend) GetValidationScore(ctx context.Context, stakerID idx.StakerID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidationScore", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidationScore indicates an expected call of GetValidationScore
func (mr *MockBackendMockRecorder) GetValidationScore(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationScore", reflect.TypeOf((*MockBackend)(nil).GetValidationScore), ctx, stakerID)
}

// GetOriginationScore mocks base method
func (m *MockBackend) GetOriginationScore(ctx context.Context, stakerID idx.StakerID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginationScore", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginationScore indicates an expected call of GetOriginationScore
func (mr *MockBackendMockRecorder) GetOriginationScore(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginationScore", reflect.TypeOf((*MockBackend)(nil).GetOriginationScore), ctx, stakerID)
}

// GetRewardWeights mocks base method
func (m *MockBackend) GetRewardWeights(ctx context.Context, stakerID idx.StakerID) (*big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardWeights", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRewardWeights indicates an expected call of GetRewardWeights
func (mr *MockBackendMockRecorder) GetRewardWeights(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardWeights", reflect.TypeOf((*MockBackend)(nil).GetRewardWeights), ctx, stakerID)
}

// GetStakerPoI mocks base method
func (m *MockBackend) GetStakerPoI(ctx context.Context, stakerID idx.StakerID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerPoI", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerPoI indicates an expected call of GetStakerPoI
func (mr *MockBackendMockRecorder) GetStakerPoI(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerPoI", reflect.TypeOf((*MockBackend)(nil).GetStakerPoI), ctx, stakerID)
}

// GetDowntime mocks base method
func (m *MockBackend) GetDowntime(ctx context.Context, stakerID idx.StakerID) (idx.Block, inter.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDowntime", ctx, stakerID)
	ret0, _ := ret[0].(idx.Block)
	ret1, _ := ret[1].(inter.Timestamp)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDowntime indicates an expected call of GetDowntime
func (mr *MockBackendMockRecorder) GetDowntime(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDowntime", reflect.TypeOf((*MockBackend)(nil).GetDowntime), ctx, stakerID)
}

// GetDelegationClaimedRewards mocks base method
func (m *MockBackend) GetDelegationClaimedRewards(ctx context.Context, id sfctype.DelegationID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationClaimedRewards", ctx, id)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationClaimedRewards indicates an expected call of GetDelegationClaimedRewards
func (mr *MockBackendMockRecorder) GetDelegationClaimedRewards(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationClaimedRewards", reflect.TypeOf((*MockBackend)(nil).GetDelegationClaimedRewards), ctx, id)
}

// GetStakerClaimedRewards mocks base method
func (m *MockBackend) GetStakerClaimedRewards(ctx context.Context, stakerID idx.StakerID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerClaimedRewards", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerClaimedRewards indicates an expected call of GetStakerClaimedRewards
func (mr *MockBackendMockRecorder) GetStakerClaimedRewards(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerClaimedRewards", reflect.TypeOf((*MockBackend)(nil).GetStakerClaimedRewards), ctx, stakerID)
}

// GetStakerDelegationsClaimedRewards mocks base method
func (m *MockBackend) GetStakerDelegationsClaimedRewards(ctx context.Context, stakerID idx.StakerID) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerDelegationsClaimedRewards", ctx, stakerID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerDelegationsClaimedRewards indicates an expected call of GetStakerDelegationsClaimedRewards
func (mr *MockBackendMockRecorder) GetStakerDelegationsClaimedRewards(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerDelegationsClaimedRewards", reflect.TypeOf((*MockBackend)(nil).GetStakerDelegationsClaimedRewards), ctx, stakerID)
}

// GetStaker mocks base method
func (m *MockBackend) GetStaker(ctx context.Context, stakerID idx.StakerID) (*sfctype.SfcStaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaker", ctx, stakerID)
	ret0, _ := ret[0].(*sfctype.SfcStaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaker indicates an expected call of GetStaker
func (mr *MockBackendMockRecorder) GetStaker(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaker", reflect.TypeOf((*MockBackend)(nil).GetStaker), ctx, stakerID)
}

// GetStakerID mocks base method
func (m *MockBackend) GetStakerID(ctx context.Context, addr common.Address) (idx.StakerID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerID", ctx, addr)
	ret0, _ := ret[0].(idx.StakerID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerID indicates an expected call of GetStakerID
func (mr *MockBackendMockRecorder) GetStakerID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerID", reflect.TypeOf((*MockBackend)(nil).GetStakerID), ctx, addr)
}

// GetStakers mocks base method
func (m *MockBackend) GetStakers(ctx context.Context) ([]sfctype.SfcStakerAndID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakers", ctx)
	ret0, _ := ret[0].([]sfctype.SfcStakerAndID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakers indicates an expected call of GetStakers
func (mr *MockBackendMockRecorder) GetStakers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakers", reflect.TypeOf((*MockBackend)(nil).GetStakers), ctx)
}

// GetDelegationsOf mocks base method
func (m *MockBackend) GetDelegationsOf(ctx context.Context, stakerID idx.StakerID) ([]sfctype.SfcDelegationAndID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsOf", ctx, stakerID)
	ret0, _ := ret[0].([]sfctype.SfcDelegationAndID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsOf indicates an expected call of GetDelegationsOf
func (mr *MockBackendMockRecorder) GetDelegationsOf(ctx, stakerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsOf", reflect.TypeOf((*MockBackend)(nil).GetDelegationsOf), ctx, stakerID)
}

// GetDelegationsByAddress mocks base method
func (m *MockBackend) GetDelegationsByAddress(ctx context.Context, addr common.Address) ([]sfctype.SfcDelegationAndID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByAddress", ctx, addr)
	ret0, _ := ret[0].([]sfctype.SfcDelegationAndID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByAddress indicates an expected call of GetDelegationsByAddress
func (mr *MockBackendMockRecorder) GetDelegationsByAddress(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByAddress", reflect.TypeOf((*MockBackend)(nil).GetDelegationsByAddress), ctx, addr)
}

// GetDelegation mocks base method
func (m *MockBackend) GetDelegation(ctx context.Context, id sfctype.DelegationID) (*sfctype.SfcDelegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegation", ctx, id)
	ret0, _ := ret[0].(*sfctype.SfcDelegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegation indicates an expected call of GetDelegation
func (mr *MockBackendMockRecorder) GetDelegation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegation", reflect.TypeOf((*MockBackend)(nil).GetDelegation), ctx, id)
}
