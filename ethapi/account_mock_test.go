// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum/go-ethereum/accounts (interfaces: Backend,Wallet)

// Package ethapi is a generated GoMock package.
package ethapi

import (
	ethereum "github.com/ethereum/go-ethereum"
	accounts "github.com/ethereum/go-ethereum/accounts"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// AmBackend is a mock of Backend interface
type AmBackend struct {
	ctrl     *gomock.Controller
	recorder *AmBackendMockRecorder
}

// AmBackendMockRecorder is the mock recorder for AmBackend
type AmBackendMockRecorder struct {
	mock *AmBackend
}

// NewAmBackend creates a new mock instance
func NewAmBackend(ctrl *gomock.Controller) *AmBackend {
	mock := &AmBackend{ctrl: ctrl}
	mock.recorder = &AmBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *AmBackend) EXPECT() *AmBackendMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *AmBackend) Subscribe(arg0 chan<- accounts.WalletEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *AmBackendMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*AmBackend)(nil).Subscribe), arg0)
}

// Wallets mocks base method
func (m *AmBackend) Wallets() []accounts.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]accounts.Wallet)
	return ret0
}

// Wallets indicates an expected call of Wallets
func (mr *AmBackendMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*AmBackend)(nil).Wallets))
}

// MockWallet is a mock of Wallet interface
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockWallet) Accounts() []accounts.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts")
	ret0, _ := ret[0].([]accounts.Account)
	return ret0
}

// Accounts indicates an expected call of Accounts
func (mr *MockWalletMockRecorder) Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockWallet)(nil).Accounts))
}

// Close mocks base method
func (m *MockWallet) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWalletMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWallet)(nil).Close))
}

// Contains mocks base method
func (m *MockWallet) Contains(arg0 accounts.Account) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (mr *MockWalletMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockWallet)(nil).Contains), arg0)
}

// Derive mocks base method
func (m *MockWallet) Derive(arg0 accounts.DerivationPath, arg1 bool) (accounts.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Derive", arg0, arg1)
	ret0, _ := ret[0].(accounts.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Derive indicates an expected call of Derive
func (mr *MockWalletMockRecorder) Derive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Derive", reflect.TypeOf((*MockWallet)(nil).Derive), arg0, arg1)
}

// Open mocks base method
func (m *MockWallet) Open(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockWalletMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockWallet)(nil).Open), arg0)
}

// SelfDerive mocks base method
func (m *MockWallet) SelfDerive(arg0 []accounts.DerivationPath, arg1 ethereum.ChainStateReader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelfDerive", arg0, arg1)
}

// SelfDerive indicates an expected call of SelfDerive
func (mr *MockWalletMockRecorder) SelfDerive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDerive", reflect.TypeOf((*MockWallet)(nil).SelfDerive), arg0, arg1)
}

// SignData mocks base method
func (m *MockWallet) SignData(arg0 accounts.Account, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignData", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignData indicates an expected call of SignData
func (mr *MockWalletMockRecorder) SignData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignData", reflect.TypeOf((*MockWallet)(nil).SignData), arg0, arg1, arg2)
}

// SignDataWithPassphrase mocks base method
func (m *MockWallet) SignDataWithPassphrase(arg0 accounts.Account, arg1, arg2 string, arg3 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignDataWithPassphrase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignDataWithPassphrase indicates an expected call of SignDataWithPassphrase
func (mr *MockWalletMockRecorder) SignDataWithPassphrase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDataWithPassphrase", reflect.TypeOf((*MockWallet)(nil).SignDataWithPassphrase), arg0, arg1, arg2, arg3)
}

// SignText mocks base method
func (m *MockWallet) SignText(arg0 accounts.Account, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignText", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignText indicates an expected call of SignText
func (mr *MockWalletMockRecorder) SignText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignText", reflect.TypeOf((*MockWallet)(nil).SignText), arg0, arg1)
}

// SignTextWithPassphrase mocks base method
func (m *MockWallet) SignTextWithPassphrase(arg0 accounts.Account, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTextWithPassphrase", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTextWithPassphrase indicates an expected call of SignTextWithPassphrase
func (mr *MockWalletMockRecorder) SignTextWithPassphrase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTextWithPassphrase", reflect.TypeOf((*MockWallet)(nil).SignTextWithPassphrase), arg0, arg1, arg2)
}

// SignTx mocks base method
func (m *MockWallet) SignTx(arg0 accounts.Account, arg1 *types.Transaction, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTx indicates an expected call of SignTx
func (mr *MockWalletMockRecorder) SignTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTx", reflect.TypeOf((*MockWallet)(nil).SignTx), arg0, arg1, arg2)
}

// SignTxWithPassphrase mocks base method
func (m *MockWallet) SignTxWithPassphrase(arg0 accounts.Account, arg1 string, arg2 *types.Transaction, arg3 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTxWithPassphrase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTxWithPassphrase indicates an expected call of SignTxWithPassphrase
func (mr *MockWalletMockRecorder) SignTxWithPassphrase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxWithPassphrase", reflect.TypeOf((*MockWallet)(nil).SignTxWithPassphrase), arg0, arg1, arg2, arg3)
}

// Status mocks base method
func (m *MockWallet) Status() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockWalletMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockWallet)(nil).Status))
}

// URL mocks base method
func (m *MockWallet) URL() accounts.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(accounts.URL)
	return ret0
}

// URL indicates an expected call of URL
func (mr *MockWalletMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockWallet)(nil).URL))
}
